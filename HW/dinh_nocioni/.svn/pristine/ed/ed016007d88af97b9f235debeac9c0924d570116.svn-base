def try_vendor_call(vendor_service): #Feedback: get_vendor_price_ignore_exception
    try:
        return vendor_service()
    except Exception:
        pass 
    

def find_lowest_price_and_vendor(num_of_days, vendor_price_services=[]): 
    filtered_vendors = list(filter(None, list(map(try_vendor_call, vendor_price_services))))

    if len(filtered_vendors) == 0:
        raise ValueError("No Vendor to Provide Service")
    
    vendor_name, price_per_day = sorted(filtered_vendors, key=lambda vendor: vendor[1])[0] 

    return {'price_per_day': price_per_day,
            'total_price': price_per_day * num_of_days,
            'vendor_name': vendor_name}
