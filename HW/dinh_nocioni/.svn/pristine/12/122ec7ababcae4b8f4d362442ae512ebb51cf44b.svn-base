HW2 Due 11:59PM CT February 10

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

In this homework we'll create an initial strategic design for a version of the Wordle game.

Let's first describe the version of the game that we'll design. We'll not be writing any code in this homework, but only be creating an initial design.

We will work with some restrictions for this game.

The game will allow us to play against only one word "FAVOR" but we will design in a way that the game can easily be extended for other words that a user may be asked to guess.

When the game starts the user is presented with a grid of six rows with 5 boxes in each row. The objective of the game is for the user to guess the word the application has chosen, which in our case is FAVOR. Words can only be 5 letters long.

Initially a "Guess" button is disabled. Once a player enters 5 letters, the button is enabled. If the user removes a character, which they can to change, then the Guess button is disabled again. 

When a player types a letter, it appears in upper case within a box in the currently active row. At the start, the first row is active. If a user presses any key other than a letter, the keystrokes are ignored.

When a user clicks on the "Guess" button the currently active row becomes inactive and any further input by the user will not affect the details on that row. The next row becomes active unless the user has completed all six rows or has won the game.

Once the "Guess" button is clicked, each box in the currently active row changes to a green, yellow, or gray color. It is green if the entered letter is in the exact location as it appears in the word to be guessed. It will be yellow if the letter appears in a different position. It will be gray if the letter is not present in the word to be guessed.

For example, given the word FAVOR, if the user enters RAPID, then the five boxes will have the colors Yellow, Green, GRAY, GRAY, GRAY, respectively.

If the user enters the next guess as MAYOR, the colors will be Gray, Green, Gray, Green, Green, respectively, in the second row.

Once the player wins they can't enter any more guess and will have to quit the game.

If the player guesses on the first try, display "Amazing". If the player guesses on the second try, display "Splendid". If they guess on a third try, display "Awesome". Win on any other tries, display "Yay". If the user fails to guess after six tries, display "It was FAVOR, better luck next time". Of course, if the word being guessed is something other than FAVOR, it will appears instead on that display line.

Create an initial design of this program and answer the questions below. 
Feel free to ask for frequent reviews.

Include a separate file (may be a scan of hand drawn picture if you like, or a pdf, tiff, word document, etc.) which shows a UML diagram of your design. Refer to that diagram from the text description you write here.

The file is UML Diagram2.pdf. 

1. How would you design this program? 

	The diagram of the Wordle application design consists of a Wordle Logic class driving the game logic, and the GUI class which handles the PyGame functions for the game window (or functions related to command line processing as we should have the ability to play the game in the command line).
	The logic class has 3 functions that drive the game: chooseResult() takes a string and stores it into the variable result such that we can change the word that needs to be guessed (we can have many iterations of the game with different target words).

	The processInput() function takes as input the integer code (ASCII) of the key that is pressed (detected by the command line/GUI class) and performs validation to make sure the key code ranges from a-z or A-Z. The letters of each row are stored as a list of strings (rows variable), if the string in the current row (accessed by the attempts iterator) has 6 characters then we ignore the keystroke. 

	The submitRow() function is called when the user wants to submit the row (presses submit) and will take the current row's string and compares it with the result (target word), it returns a list of integers denoting whether the character is in the correct position (green), whether it exists but is not in the right position (yellow), and whether it does not appear at all (gray); This list of integers is sent to the GUI class where it can use the color codes (0, 1, 2) to fill the colors in the row.

	Finally, if the word was correctly guessed, the boolean for guessed will change to 'true' and the execution of the game stops (we do not handle any more key inputs but the GUI window remains open until the user closes it manually).

2. Discuss what language you would use.

	We decided to choose Python to implement the Wordle game because my teammate and I agreed that we were both familiar with the language. Furthermore, it is an excellent choice for prototyping a game. Thanks to the language's simplicity and coding speed, getting a relatively simple game such as Wordle to be up and running in minimal time is much easier. 

	Python provides excellent flexible object orientation, easing the work of creating new objects and modifying existing ones. The language is also dynamic typing, reducing the time of having to declare variables ahead, saving time and hassle. Dynamic typing provides excellent flexibility for faster prototyping and testing, which is what we want in this assignment.

	Furthermore, Python also has excellent game development libraries such as Pygame. The library provides great flexibility in designing a beautiful front end and can handle key events well to help maintain our game loop. 

	We can also utilize objects to represent the rows allowing us to scale the number of guesses with minimal cost. We can also take advantage of the PyGame library to help us handle the key presses and maintain our program in a waiting state while we are reading a key. 

3. How do you plan to structure the program, what libraries would you use?

	Since we are planning to create a Wordle game in Python, we will be adding Python libraries that support the creation of a front-end application as well as support autonomous unit testing for the game. Specifically, we will use Pygame as our front-end library and Pytest for unit testing. We chose Pygame because of its broad support of game types and easy integration with Python. For example, Pygame supports many game types, from 2D board games to 3D first-person shooters; thus, it also has a pre-built API for our Wordle 2D board game. The API speeds up the process of creating a theme, creating buttons, and creating error handlers which are extremely useful during game development.

	Similarly, we chose Pytest because of its seamless integration with Python. Since Wordle does not have many conditions that can break the game, we can include 5-6 test cases that can catch all, if not most, possible errors. Some test cases are special characters, non-valid words, and blank. With these test cases in Pytest, the unit testing should autonomously detect whether the program is operating as intended.
 
	Our Wordle Logic object will maintain the main game loop as it retrieves key presses from the GUI and sends them to the appropriate row object based on the "attempts" iterator (starting at 0). 	

Total [10]: 10

Please see https://www2.cs.uh.edu/~svenkat/spring2023sd/scores.pdf

