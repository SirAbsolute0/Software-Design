import unittest
from src.wordPicker import getResponse, parse, get_a_random_word_given_a_seed, get_a_random_word
from unittest.mock import patch

#Feedback: please make sure the test names here convey the details mentioned in the tests.txt file, name the tests here close to what is said in tests.txt

class WordPickerTests(unittest.TestCase):

  def test_getResponse(self):
    self.assertTrue(len(getResponse()) > 0)

  def test_parse(self):
    expected, words = [['FAVOR', 'RAPID', 'AGILE'], '[FAVOR, RAPID, AGILE]']

    self.assertEqual(expected, parse(words))

  def test_parse_empty(self):

    self.assertEqual([], parse('[]'))

  def test_parse_exception(self):

    with self.assertRaises(ValueError):
      parse("FAVOR") 
      
    
  def test_get_a_random_word_given_a_seed(self):
      seed = 129
      words = ['FAVOR', 'RAPID', 'AGILE']

      word = get_a_random_word_given_a_seed(seed, words)
      self.assertTrue(len(word) == 5) #Feedback: please remove
      self.assertTrue(word.isupper()) #Feedback: please remove
      #Feedback: what do we expect here, as precisely as possible

  def test_get_a_random_word_given_a_seed_twice(self):
      seed = 129
      words = ['FAVOR', 'RAPID', 'AGILE']

      word1 = get_a_random_word_given_a_seed(seed, words)
      word2 = get_a_random_word_given_a_seed(seed, [i for i in words if i != word1]) #Feedback: no for
      
      self.assertFalse(word1 == word2) #Feedback: assert not equal to
      
  def test_get_a_random_word_function_calls(self):

      with patch("src.wordPicker.getResponse") as getResponseMock, patch("src.wordPicker.parse") as parseMock, patch("src.wordPicker.get_a_random_word_given_a_seed") as get_a_random_word_given_a_seed_mock:

        getResponseMock.return_value = "['FAVOR', 'RAPID', 'AGILE']" #Feedback: no ' here for the raw data
        parseMock.return_value =  ['FAVOR', 'RAPID', 'AGILE']
        get_a_random_word_given_a_seed_mock.return_value = "FAVOR"
        
        get_a_random_word() #Feedback: what do we expect as a result here?
        
        getResponseMock.assert_called() #Feedback: called with?
        parseMock.assert_called() #Feedback: called with?
        get_a_random_word_given_a_seed_mock.assert_called() #Feedback: called with?
      
  def test_get_a_random_word_with_random_seed(self):
      with patch("src.wordPicker.getResponse") as getResponseMock, patch("src.wordPicker.parse") as parseMock, patch("src.wordPicker.get_a_random_word_given_a_seed") as get_a_random_word_given_a_seed_mock:

        getResponseMock.return_value = "['FAVOR', 'RAPID', 'AGILE']"
        parseMock.return_value =  ['FAVOR', 'RAPID', 'AGILE']
        get_a_random_word_given_a_seed_mock.return_value = "FAVOR"
        
        get_a_random_word()
        seed1 = get_a_random_word_given_a_seed_mock.call_args.args[0]
        
        get_a_random_word()
        seed2 = get_a_random_word_given_a_seed_mock.call_args.args[0]

        self.assertNotEqual(seed1, seed2)

  def test_get_a_random_word_length_and_caps(self): #Feedback: please remove, not listed in tests.txt

    word = get_a_random_word()

    self.assertTrue(len(word) == 5)
    self.assertTrue(word.isupper())
    
if __name__ == '__main__': 
   unittest.main()
