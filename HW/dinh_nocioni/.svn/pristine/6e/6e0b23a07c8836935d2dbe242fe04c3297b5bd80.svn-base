import threading
import queue
import time

def get_vendor_price_ignore_exception(vendor_service): 
    try:
        return vendor_service()
    except Exception:
        pass 
    
def find_lowest_price_and_vendor(num_of_days, vendor_price_services=[]):
    vendors_relvoving_queue = queue.Queue()
    check_new_vendor_during_runtime_thread = threading.Thread(check_new_vendor_during_runtime())
    check_new_vendor_during_runtime_thread.start()
    
    vendors_with_no_error = list(filter(lambda response: isinstance(response, tuple), list(map(get_vendor_price_ignore_exception, vendor_price_services))))

    if len(vendors_with_no_error) == 0:
        raise ValueError("No Vendor to Provide Service")
    
    lowest_price_per_day = min(vendors_with_no_error, key=lambda vendor: vendor[1])[1]
    
    vendors_with_best_pricing = [vendor[0] for vendor in vendors_with_no_error if vendor[1] == lowest_price_per_day]
    return {'price_per_day': lowest_price_per_day, 'total_price': lowest_price_per_day * num_of_days, 'vendor_names' : vendors_with_best_pricing}

def check_new_vendor_during_runtime(updated_price_and_services = []):
    if len(updated_price_and_services) != 0:
        queue.put(updated_price_and_services)

    
