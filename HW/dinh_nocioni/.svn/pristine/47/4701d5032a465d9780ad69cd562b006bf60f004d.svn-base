def get_vendor_price_ignore_exception(vendor_service): 
    try:
        return vendor_service()
    except Exception:
        pass 
    
def find_lowest_price_and_vendor(num_of_days, vendor_price_services=[]):
    vendors_with_no_error = list(filter(lambda response: isinstance(response, tuple), list(map(get_vendor_price_ignore_exception, vendor_price_services))))

    if len(vendors_with_no_error) == 0:
        raise ValueError("No Vendor to Provide Service")
    
    lowest_price_vendor = min(vendors_with_no_error, key=lambda vendor: vendor[1]) 
    lowest_price_per_day = lowest_price_vendor[1] #Feedback: we can find the lowest price without needing to create a list of lowest price vendor. This and the above line can be combined.
    
    vendors_with_best_pricing = [vendor[0] for vendor in vendors_with_no_error if vendor[1] == lowest_price_per_day]
    return {'price_per_day': lowest_price_per_day, 'total_price': lowest_price_per_day * num_of_days, 'vendor_names' : vendors_with_best_pricing}
