def get_vendor_price_ignore_exception(vendor_service): 
    try:
        return vendor_service()
    except Exception:
        pass 
    
def find_lowest_price_and_vendor(num_of_days, vendor_price_services=[]):
    vendors_with_no_error = list(filter(lambda response: isinstance(response, tuple), list(map(get_vendor_price_ignore_exception, vendor_price_services))))
    #Feedback: it will help to break this to save the result of filter
    #then use that variable to perform the map to get the vendors_with_no_error
    #Feedback: Instead of vendors_with_no_error, it will be useful to call it price_details

    if len(vendors_with_no_error) == 0:
        raise ValueError("No Vendor to Provide Service")
    
    lowest_price_per_day = min(vendors_with_no_error, key=lambda vendor: vendor[1])[1]    
    vendors_with_best_pricing = [vendor[0] for vendor in vendors_with_no_error if vendor[1] == lowest_price_per_day]
    
    return {'price_per_day': lowest_price_per_day, 'total_price': lowest_price_per_day * num_of_days, 'vendor_names' : vendors_with_best_pricing}

#Feedback: SRP: So far this file focused on price details. The code below is dealing with
#something different.

def add_vendors(new_vendor_price_services = []):
    if not hasattr(add_vendors, "vendor_price_services"):
        add_vendors.vendor_price_services = new_vendor_price_services
    else:
        add_vendors.vendor_price_services.extend(new_vendor_price_services)

    return add_vendors.vendor_price_services

                    

    
