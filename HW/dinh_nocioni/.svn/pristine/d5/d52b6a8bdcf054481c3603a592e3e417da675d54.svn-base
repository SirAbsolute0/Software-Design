import unittest
from src.wordPicker import getResponse, parse, get_a_random_word_given_a_seed, get_a_random_word
from unittest.mock import patch

class WordPickerTests(unittest.TestCase):

  def test_getResponse(self):
    self.assertTrue(len(getResponse()) > 0)

  def test_parse(self):
    expected, words = [['FAVOR', 'RAPID', 'AGILE'], '[FAVOR, RAPID, AGILE]']

    self.assertEqual(expected, parse(words))

  def test_parse_empty(self):

    self.assertEqual([], parse('[]'))

  def test_parse_exception(self):

    with self.assertRaises(ValueError):
      parse("FAVOR") 
    
#Feedback: please do not add type to variable names. words instead of wordList    
    
  def test_get_a_random_word_given_a_seed(self):
      seed = 129
      wordList = ['FAVOR', 'RAPID', 'AGILE']
      #Feedback: We should call get_a_random_word_given_a_seed once (not twice) and check the value returned is a valid word that is expected

      word1 = get_a_random_word_given_a_seed(seed, wordList)
      word2 = get_a_random_word_given_a_seed(seed, [i for i in wordList if i != word1])

      self.assertFalse(word1 == word2)

#Feedback: test that calls get_a_random_word_given_a_seed twice and checks the words are different

  def test_get_a_random_word_function_calls(self):

      with patch("src.wordPicker.getResponse") as getResponseMock, patch("src.wordPicker.parse") as parseMock, patch("src.wordPicker.get_a_random_word_given_a_seed") as get_a_random_word_given_a_seed_mock:

        getResponseMock.return_value = "['FAVOR', 'RAPID', 'AGILE']"
        parseMock.return_value =  ['FAVOR', 'RAPID', 'AGILE']
        get_a_random_word_given_a_seed_mock.return_value = "FAVOR"
        
        word = get_a_random_word()
        
        getResponseMock.assert_called()
        parseMock.assert_called()
        get_a_random_word_given_a_seed_mock.assert_called()
      
  def test_get_a_random_word_with_random_seed(self):
      with patch("src.wordPicker.getResponse") as getResponseMock, patch("src.wordPicker.parse") as parseMock, patch("src.wordPicker.get_a_random_word_given_a_seed") as get_a_random_word_given_a_seed_mock:

        getResponseMock.return_value = "['FAVOR', 'RAPID', 'AGILE']"
        parseMock.return_value =  ['FAVOR', 'RAPID', 'AGILE']
        get_a_random_word_given_a_seed_mock.return_value = "FAVOR"
        
        get_a_random_word()
        seed1 = get_a_random_word_given_a_seed_mock.call_args.args[0]

        get_a_random_word()
        seed2 = get_a_random_word_given_a_seed_mock.call_args.args[0]

        self.assertNotEqual(seed1, seed2)

  def test_get_a_random_word_length_and_caps(self):

    word = get_a_random_word()

    self.assertTrue(len(word) == 5)
    self.assertTrue(word.isupper())
    
if __name__ == '__main__': 
   unittest.main()
