Please keep all files related to a homework or an assignment within the appropriate directory. Files checked in outside of specific homework or assignment directory will not be reviewed or graded for that homework/assignment.

Check in and modify files as many times as you like. You will not be able to modify the files after the deadline.

You will work as a pair, both of you are responsible for the completed work in all assignments and homework. Reasonable effort is expected from each person. If you do not check in, you will not receive any scores. When pairing please switch who checks in so there is significant number of check in from each of you.

The deadlines are strict, there will be no extensions. Don't email any code to Venkat or to the mailing list. Your last check in before the deadline will be graded. If your last check in breaks the code, both you and your pair will lose significant points.

Please feel free to ask for frequent reviews. See the reviews/readme.txt file for details on how to ask for reviews.

You can evolve the answers and solutions based on the reviews. Only the latest checkin at the time of review will be looked at. Also the final check in will be the only one graded.

You are still responsible to successfully complete an homework or assignment even if your pair is a no-show. You can request to change pairs at any time and if there is another person in the class willing to pair with you we can make the switch.

A lot of help will be provided in this course, but you have to start early and ask for help along the way.                                                                      

Please read the academic honesty policy posted on the course mailing list.                   

The above details apply to all homework and assignments in this course.                   

Now to homework #1.
==============================================================================
HW1: Due 11:59PM CT February 3

Is design dead according to Martin Fowler in 
<http://martinfowler.com/articles/designDead.html>?

Q1. What are some of the main observations he makes about how we should design?

	Martin Fowler, explores the differences between planned and evolutionary design as the two prominent approaches in software design. Evolutionary design is the practice of continuously changing the design as the system is implemented; This obviously leads to many complications in the development of a program as the code becomes a fusion of small sections of code built for the purpose of satisfying independent requirements, as such the cost of refactoring such code is very high (this is known as software entropy).

	Planned design is introduced as an alternative to evolutionary design by "thinking out" the big issues that may arise in advance and actively avoiding tactical decisions that lead to such software entropy when refactoring is necessary. Unfortunately not even this approach is infallible, Fowler explores how it becomes impractical to think of all possible issues that may arise during implementation and as a result developers should not dedicate too much time and effort towards trying to mitigate future complications. They also mention the "cultural" conflicts between designers and programmers as the fast-paced field in software engineering causes designers to fall behind in novel development practices/patterns, this leads to programmers adapting the design when encountering problems during implementation (as such by this point designers may have moved onto other projects and coordination becomes costly or simply impossible).

	One of the slogans of extreme programming (XP) is "You aren't going to need it" (YAGNI) which describes how we should not append any code to our project for functionality we do not need today. As such we should never have to worry about future functionality during our programming sessions, YAGNI keeps the focus on perfecting the features that are needed in the current iteration. As Martin Fowler says "Let these structures grow as they are needed", there is a very high chance that our first few implementations for a feature needed in future iterations becomes sub-optimal. If our certainty for developing relevant code is low then why even waste resources on its development? After all it is not needed right now. In its essence, YAGNI is all about preserving simplicity in our designs by not considering features outside the scope of our current user story, just because we do not consider future iterations does not mean we will not have to refactor any code down the road. Simple design exploits XP practices but also is an "enabling practice", we will continuously need to refactor our code to simplify designs but people must also embrace the idea that it is extremely unlikely to get the simplest design in its first iteration.

	In the article "Is Design Dead?" the author, Martin Fowler, discusses the rising of Extreme Programming (XP) practices which could significantly affect the future view of design in software development. Based on XP practices, Martin points out four critical observations on how we as a programmer should do design. These four key observations are effective design patterns, understanding the design architecture, utilization of diagrams, and rapid spotting.

	According to Martin, a practical design pattern means we understand the price of a pattern worth paying. Specifically, we need to be more familiar with gradually easing into a pattern. Practical usage of patterns will simplify future refactoring since many patterns can be traced back to GOF for reference. Some advice for improving pattern utilization is investing time in learning about patterns, concentrating on when and how to apply the pattern in its simplest form, and finally, do not be afraid to remove unnecessary patterns.

	Along with the usage of patterns, it is also crucial to understand the design architecture. The author suggests starting by accessing the likely architecture but being ready to simplify the architecture as soon as a part of the architecture is not adding anything. The first design will give a general work guideline but also leaves room for improvement or removal later in the future.

	Martin highlights the usage of diagrams in the design phase. He suggests that we as designers should remember the purpose of drawing diagrams. Furthermore, only draw things that are necessary to communicate the right message. Diagrams can also be a valuable tool for exploring a design before coding. A diagram is the most effective when everyone can access it; thus, it should be shared between teammates. If no one uses the diagram, it should be discarded.

	Lastly, rapid spotting is essential for design since software should be set up to test potential problem areas rapidly. Rapid spotting helps identify issues along the development. It also means that it is worth experimenting to see how hard future changes can be. The ability to spot conlflicts in the program quickly gives the development team a lot of power in terms of reversibility (version control in an agile environment now becomes very valuable). 

	In summary, while the new rise of XP development practices seems to oppose traditional designing practices, Martin concludes that it will not entirely replace designing. Furthermore, there are several designing practices, such as effective design patterns, understanding design architecture, utilization of diagrams, and rapid spotting, that XP developers can consider to develop better well-rounded software.

Q2. Relate these recommendations to your personal experiences, where it may have 
worked or may not have worked for you.

Phuong:
	As an undergraduate student, much of my programming experiences come from Computer Science courses within the university. Since most courses design homework in favor of quantity, I tend to develop "software prototypes" within each class rather than complete software with a development cycle. Furthermore, the assignment is usually unrelated to each other, so I would never have to go back to a particular homework to build new software. Thus, I rarely ever exercise the software design phase. Personally, it is simply not a worthwhile time investment to do a design for every homework problem. Therefore, I would say that I am currently leaning more toward the XP development side. 
	
	Out of the four critical observations from Martin Fowler, I have only utilized rapid spotting and diagrams for school work. Specifically, I have used rapid spotting through unit testing to debug code and diagrams to illustrate database relationships. Both have shown to be helpful during code development, but the tradeoffs are not enough for me to consider consistently using these methods. Granted, throughout my academic years, I have only worked in small development groups, usually from 1 to 3 people, so these designing skills have not been able to show their full potential. However, my current stand is in an academic setting; the tradeoffs to exercising designing skills are not worthwhile.
	
	Even in a professional setting, I still find it difficult to justify the time for planning my software design rather than programming it. This is especially true when I know I might rewrite the design altogether. Thus, I still chose to go with the XP approach, where I can quickly design code to fit the client's increasing demand for functionalities, then, in the end, go back and refactor unnecessary changes. This method has been shown to improve customers'/managers' favorability at the cost of maintenance in the future. Though unfortunate that more time in the designing and planning phases could ease the bumps in development, if the customers and managers are not happy, then I might not even be working at the end of the cycle.

Federico:

Throughout my time as an undergrad student I have always subconciously neglected the design phase of software development as ideas came to me and wanted to create drafts of them as code as soon as possible. The approach led to me refactoring sections of code many times; Reflecting on these moments I realize that a certain degree of planning (either through UML or other methods) could have saved some time.

My personal experience in a professional environment has taught me that many ordinary design approaches (such as UML and the use of diagrams) for developing software are redundant when facing certain limitations. During an internship in 2021, my development environment was limited by the COVID-19 pandemic both in terms of my team size (just myself and another intern) and internship duration.

As we were developing an application for the team with a broad requirement, we decided to delve directly into development as we shared Martin Fowler's ideas regarding the use of diagrams in the design phase. It takes too long to draw diagrams and keep them synchronized with the code and ultimately neither myself or my team member would ever glance at the design diagrams once we started programming (such diagrams would have only felt performative and be seen as 'decoration' for our design). Reflecting on Fowler's ideas in the article: "If people are not actively using the diagrams, throw them away".

It could be said that our approach at the time was to follow the ideas of evolutionary design. Reversibility (rapid spotting and version control in our agile project) could have saved us a lot of time as our application suffered from entropy and refactoring was necessary on functions written in the first few days of development. 



Total [10]: 10

Please see https://www2.cs.uh.edu/~svenkat/spring2023sd/scores.pdf


