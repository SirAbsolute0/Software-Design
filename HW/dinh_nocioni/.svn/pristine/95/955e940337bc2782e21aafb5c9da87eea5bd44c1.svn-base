HW2 Due 11:59PM CT February 10

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

In this homework we'll create an initial strategic design for a version of the Wordle game.

Let's first describe the version of the game that we'll design. We'll not be writing any code in this homework, but only be creating an initial design.

We will work with some restrictions for this game.

The game will allow us to play against only one word "FAVOR" but we will design in a way that the game can easily be extended for other words that a user may be asked to guess.

When the game starts the user is presented with a grid of six rows with 5 boxes in each row. The objective of the game is for the user to guess the word the application has chosen, which in our case is FAVOR. Words can only be 5 letters long.

Initially a "Guess" button is disabled. Once a player enters 5 letters, the button is enabled. If the user removes a character, which they can to change, then the Guess button is disabled again. 

When a player types a letter, it appears in upper case within a box in the currently active row. At the start, the first row is active. If a user presses any key other than a letter, the keystrokes are ignored.

When a user clicks on the "Guess" button the currently active row becomes inactive and any further input by the user will not affect the details on that row. The next row becomes active unless the user has completed all six rows or has won the game.

Once the "Guess" button is clicked, each box in the currently active row changes to a green, yellow, or gray color. It is green if the entered letter is in the exact location as it appears in the word to be guessed. It will be yellow if the letter appears in a different position. It will be gray if the letter is not present in the word to be guessed.

For example, given the word FAVOR, if the user enters RAPID, then the five boxes will have the colors Yellow, Green, GRAY, GRAY, GRAY, respectively.

If the user enters the next guess as MAYOR, the colors will be Gray, Green, Gray, Green, Green, respectively, in the second row.

Once the player wins they can't enter any more guess and will have to quit the game.

If the player guesses on the first try, display "Amazing". If the player guesses on the second try, display "Splendid". If they guess on a third try, display "Awesome". Win on any other tries, display "Yay". If the user fails to guess after six tries, display "It was FAVOR, better luck next time". Of course, if the word being guessed is something other than FAVOR, it will appears instead on that display line.

Create an initial design of this program and answer the questions below. 
Feel free to ask for frequent reviews.

Include a separate file (may be a scan of hand drawn picture if you like, or a pdf, tiff, word document, etc.) which shows a UML diagram of your design. Refer to that diagram from the text description you write here.

The file is UML Diagram.pdf

How would you design this program? 

	While it is generally more suitable to utilize C++ for game application, the game can still be built in Python which is what our group have chosen to be the dominant lanaguage. Depending on the scale of the game, we will utilize a front-end game interface Python library such as Pygame. 
	
	The game interface class will have pre-created variables for rows and columns to build the board. Moreover, the colors for each word that is either correct and at the right location, correct but wrong location, and not correct will be pre-created as well. The function disply() will be overloaded depending on the given parameters. For example, the initial display() with no parameter will output the starting board with a welcoming message. The input() function will take the player input and store it to variable input. After either enter or guess button is called, class Guess will be utilized.
	
	Within class Guess, there will be a pre-created variable called result which will be "FAVOR". when the function check_result() is called through the guess button, it will store the user input into answer and compare it with result. Depending on the result, the function will indicate whether to call which overloaded display function and whether it will call the Console Messages class.

	If the Console Messages class is utilized, the function check_counter() will be called to get the player current attempt at guessing the word. If the attempt is within a specific range, the function messages will be called to print out a specific message. 


How do you plan to structure the program, what libraries would you use?
	If the plan was to design a game without colorful front-end, we won't have to utilize Pygame, if the plan was to design with front-end, then we will include Pygame. Furthermore, we will probably bring in Numpy library to ease the usage of 2D arrays for the game board. Since the base game currently only have one correct answer which is "FAVOR", we will set it to a variable. Everytime the player type in 5 chars into the empty row, we will check to see how many chars are correct compared to the word "FAVOR". 
	
