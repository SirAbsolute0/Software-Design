Assign4: Due 11:59PM CT April 14

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***


We've been asked to build part of a travel booking application that will help a user get the best price for renting a car. The first version will only provide price for one type of car, at one location, so we don't have to concern ourselves with the car type or location at this time.

We will assume that different renters will provide different web based API to get the prices. For the sake of simplicity we will have code for different vendors/renters return their name and a random price for rental per day.

We want to design the program in a way that if new rental companies are added or existing companies are removed, the program will require no modification to accommodate the change. 

If a request for price fails, the program will simply ignore the failure and continue to work with renters that do provide a rate.

The program will ask the user for the number of days they want to rent. It will then print the per day price and the total price (not including tax, etc.), and the renter/vendor offering that lowest price among the vendors.

We will design the program with a few example vendors: Avis, Budget, Dollar. After completing the program, see how adding a new vendor or removing an existing vendor works.



After completing the coding part, please answer the following:

1. What design principles did you use in this assignment? 

For assignment 4, our group utilized similar principles to the previous assignment 3, which were You Ain't Gonna Need It (YAGNI), Don't Repeat Yourself (DRY), and Single Responsibility Principle (SRP). In addition, we also applied the new Open/Close Principle (OCP) to our design to achieve minimally effective code.

Like previous assignments, we utilized YAGNI throughout the development cycle by creating test cases and implementing minimal code to pass the tests. Thus, the core functionality of our software was constantly tested after each new iteration. Following the DRY principle, we restrained from copying and pasting code and ensured our code did not overlap. If we ever needed to call a similar function, we would utilize the decorator or import the function directly. The last principle we utilized previously was SRP, which only allowed a function or class in our program to handle one functionality. Additional functionality not within the scope defined by the function name would need an independent implementation. SRP helped the flow of our code and kept cohesiveness high.

OCP was the new principle we had to adhere to in assignment 4. Specifically, OCP states that software entities should be open for extension but closed for modification. The principle applied to a function in our program where we must dynamically add new vendors without changing the code implementation. Initially, with our hard-coded vendor design, we would need to add and remove vendors within the code base. However, we achieved the OCP principle after changing our approach to automatically importing vendor files from the vendors' folder.

All in all, we applied the four main software design principles in our program for assignment 4, which are YAGNI, DRY, SRP, and OCP. While challenging to apply, these principles helped ensure a minimal cohesive code design.

2. What design patterns did you use in this assignment? 

In assignment 4, we tried implementing the Builder Design pattern to ensure the Open/Close Principle (OCP) but reverted to a simpler version of the builder design to lower complexity. 

Specifically, in our initial method of adding vendors, we hard-coded the existing vendors, after which we would call a function to import the vendors. However, our approach violated OCP as every time we needed to add or remove a vendor; we would need to go into the main source file and edit the vendor. 

Therefore, we had to find an alternative solution to the problem. After studying the Builder pattern, we wanted to implement a similar approach by creating a VendorPlugin interface for all vendors to follow. Using the interface, all vendors would inherit from the interface. Variations between each vendor could be inherited separately and added as an additional function if needed. The vendor_registry was the alternative version of the "Director," which sent the build command and retrieved all the vendors and their implementations into a list. Unfortunately, we altered the implementation at the end due to the increased review complexity.

The new approach removed the template class and the "Director." Each vendor was redesigned to be similar with the same class name and methods. Thus, we could import these classes directly and convert them into a list of objects, each with similar functions but returning different values based on the vendor. While it differed from the original builder approach, the builder method inspired the new system.

Overall, in the initial design of the discover_vendor function, we built a system similar to the builder design pattern. Afterward, we removed some components from the builder design pattern to lower complexity. Nonetheless, the builder's design approach still initially inspired the new design.

3. What are the key strengths and weaknesses of the design?

Although we utilized the builder method initially to set up the dynamic_vendor_discovery function, we saw some of its advantages and disadvantages within our program. The benefits included flexibility and readability. Meanwhile, the penalties were increased complexity and increased development time.

The builder design's first benefit was the implementation's flexible nature. We consider each vendor a builder, and each would return a pre-defined list of functions that follow a specific template. While each vendor could vary in implementation, they must follow one design template. The design helped us standardize the function name of each vendor so we could call the same set of functions within dynamic_vendor_discovery. Implementing the builder method also helped us increase readability which was the second benefit of the design. Since each vendor was inherited from an interface class and located in a separate file, it was easy to understand each vendor's implementation and see their return values. Moreover, they were all located in the same folder for easy access.

On the other hand, the first downside of the builder design was the increased complexity, which was pointed out to us in a review. Specifically, we believed the increase in complexity was because of the "Director" within the Builder design pattern. In our case, it was the VendorServiceRegistry class. Without the "Director," all vendors could still be imported with their functions, and this would reduce the complexity. Increased complexity also led to increasing development time since it would have taken us longer to implement a way to import all the vendors in a separate folder. We also tried multiple ways to import a class to the "Director" correctly, which took much development time.

Overall, while we did not implement the Builder design pattern in the final stage of our program, we still learned a lot from our initial implementation effort.

4. Any surprises or things that you did not expect or learned specifically in this assignment?

My teammate and I were each surprised by a different part of our design. For example, I was surprised at the implementation of the dynamic vendor discovery. Meanwhile, my partner was shocked at the usage of the lambda function as a way to mock Vendor APIs.
 
At first, when I read about the prompt for dynamic vendor discovery, my mind instinctively thought about threading. To be more precise, I wanted the program to have a second thread updating the vendor list every second. Thus, I spent a whole night trying to create a second thread and had a lot of difficulties calling the new thread from the test file. It was much more work than I had anticipated, especially testing it. However, after my teammate read the prompt, he changed my understanding of the prompt from trying to update every second to updating only when a specific function was called. Since the review accepted the method, his approach seemed correct and simplified the code. However, I am still surprised we did not have to utilize threading. 

On the other hand, one of the different aspects of the design that surprised my teammate the most was the use of the lambda functions to mock the vendor APIs. At first, the creation of the vendor services consisted of a tuple depicting the name and price of the vendor. However, using the lambda functions, my teammate could design around possible exceptions when calling the vendor API. He was also interested in how the design would evolve when extending the application to work with other vendors whose APIs consist of different formats. The assumption was that APIs offered by the vendors would respond to requests in a separate data structure. The design would need to evolve further to be as flexible as possible in transforming the various responses into a single format.

While there were other surprises we found during the development of the program, not using threading for dynamic discovery and utilizing lambda as mack for vendor APIs were the most shocking surprises. These surprises have shown us new ways of approaching similar problems in the future. 

