HW2 Due 11:59PM CT February 10

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

In this homework we'll create an initial strategic design for a version of the Wordle game.

Let's first describe the version of the game that we'll design. We'll not be writing any code in this homework, but only be creating an initial design.

We will work with some restrictions for this game.

The game will allow us to play against only one word "FAVOR" but we will design in a way that the game can easily be extended for other words that a user may be asked to guess.

When the game starts the user is presented with a grid of six rows with 5 boxes in each row. The objective of the game is for the user to guess the word the application has chosen, which in our case is FAVOR. Words can only be 5 letters long.

Initially a "Guess" button is disabled. Once a player enters 5 letters, the button is enabled. If the user removes a character, which they can to change, then the Guess button is disabled again. 

When a player types a letter, it appears in upper case within a box in the currently active row. At the start, the first row is active. If a user presses any key other than a letter, the keystrokes are ignored.

When a user clicks on the "Guess" button the currently active row becomes inactive and any further input by the user will not affect the details on that row. The next row becomes active unless the user has completed all six rows or has won the game.

Once the "Guess" button is clicked, each box in the currently active row changes to a green, yellow, or gray color. It is green if the entered letter is in the exact location as it appears in the word to be guessed. It will be yellow if the letter appears in a different position. It will be gray if the letter is not present in the word to be guessed.

For example, given the word FAVOR, if the user enters RAPID, then the five boxes will have the colors Yellow, Green, GRAY, GRAY, GRAY, respectively.

If the user enters the next guess as MAYOR, the colors will be Gray, Green, Gray, Green, Green, respectively, in the second row.

Once the player wins they can't enter any more guess and will have to quit the game.

If the player guesses on the first try, display "Amazing". If the player guesses on the second try, display "Splendid". If they guess on a third try, display "Awesome". Win on any other tries, display "Yay". If the user fails to guess after six tries, display "It was FAVOR, better luck next time". Of course, if the word being guessed is something other than FAVOR, it will appears instead on that display line.

Create an initial design of this program and answer the questions below. 
Feel free to ask for frequent reviews.

Include a separate file (may be a scan of hand drawn picture if you like, or a pdf, tiff, word document, etc.) which shows a UML diagram of your design. Refer to that diagram from the text description you write here.

The file is UML Diagram.pdf and UML Diagram2.pdf. We currently have two intepertations of the UML Diagram and would like to know which one would be more suitable.

1. How would you design this program? 

	The design of a game like Wordle should in its most basic architecture involve a class controlling the GUI aspects and a class controlling the logic for guessing the five letter words. Even with the prompt asking for 6 rows of 5 letters (6 attempts), we can pre-emptively design the program in such a way that the dimensions of the game can be refactored with minimal cost if necessary. 

	The preliminary design of our implementation of Wordle will consist of three classes to fit the requirements mentioned. We will build a Wordle Logic class that receives the key inputs from the GUI (or command line) and sends them to the Row objects. This class is associated with 6 Row objects which will contain the data structures for maintaining the letters in the row. Finally, the GUI class will use the PyGame library to handle the user input and display the rows and the colors after evaluating the correctness of the letter (Gray, Yellow, Green). There is an aggregation relationship between the GUI and the Wordle Logic such that the GUI needs the Wordle Logic class to function correctly but the game itself can be played without the GUI (it should also be playable on a command line). 

	The Wordle Logic class is the main driver of logic for the game, we have variables for the result (correct word), the list of row objects, and the number of attempts (this will act as an iterator for the rows list). The class contains 3 functions: chooseResult() can be used to pass a new target word that the user must guess (allows us to add different guesses other than 'FAVOR'), ProcessInput() will take a key from the GUI's GetKey() function which returns an integer value (ASCII) of the key pressed, FinishRow() will be called from the Row object and takes in a list of characters so that it may evaluate them based on the color codes shown and sent as a list of integers to the GUI which will render the colors in the row.

	The Row class is the data structure which stores the characters for the guess; It contains a list of the letters in the row. The functions AddLetter() will receive an integer value from the Wordle Logic's processInput() function and append the character value of the ASCII int to the letters list. This class also contains getters for these two variables which are used by the logic to proceed to the next row when all 5 letters have been sent. 
	
	The validation of the letters will be done from inside the GetKey() function in the GUI class, we do not want to send any invalid inputs to the classes that drive the logic of the game (Wordle Logic & Row class). As such, the function will loop until a correct key input was detected. PyGame will help us with this loop as it will send the application into a waiting state as it reads more key presses. ShowRowColors() takes as the output of FinishRow() as a parameter and prints the colored boxes of the row to the screen as necessary (decoded as 0, 1, or 2 based on the color codes). The guess function will work in tandem with the Wordle Logic's FinishRow() function such that the current row becomes inactive and the attempts iterator is incremented until attempts is equal to 6 or the word has been guessed correctly (same as our result variable).

2. Discuss what language you would use.

	We decided to choose Python to implement the Wordle game because my teammate and I agreed that we were both familiar with the language. Furthermore, it is an excellent choice for prototyping a game. Thanks to the language's simplicity and coding speed, getting a relatively simple game such as Wordle to be up and running in minimal time is much easier. 

	Python provides excellent flexible object orientation, easing the work of creating new objects and modifying existing ones. The language is also dynamic typing, reducing the time of having to declare variables ahead, saving time and hassle. Dynamic typing provides excellent flexibility for faster prototyping and testing, which is what we want in this assignment.

	Furthermore, Python also has excellent game development libraries such as Pygame. The library provides great flexibility in designing a beautiful front end and can handle key events well to help maintain our game loop. 

	We can also utilize objects to represent the rows allowing us to scale the number of guesses with minimal cost. We can also take advantage of the PyGame library to help us handle the key presses and maintain our program in a waiting state while we are reading a key. 

3. How do you plan to structure the program, what libraries would you use?

	Since we are planning to create a Wordle game in Python, we will be adding Python libraries that support the creation of a front-end application as well as support autonomous unit testing for the game. Specifically, we will use Pygame as our front-end library and Pytest for unit testing. We chose Pygame because of its broad support of game types and easy integration with Python. For example, Pygame supports many game types, from 2D board games to 3D first-person shooters; thus, it also has a pre-built API for our Wordle 2D board game. The API speeds up the process of creating a theme, creating buttons, and creating error handlers which are extremely useful during game development.

	Similarly, we chose Pytest because of its seamless integration with Python. Since Wordle does not have many conditions that can break the game, we can include 5-6 test cases that can catch all, if not most, possible errors. Some test cases are special characters, non-valid words, and blank. With these test cases in Pytest, the unit testing should autonomously detect whether the program is operating as intended.
 
	Our Wordle Interface object will maintain the main game loop as it retrieves key presses from the UI Controller and sends them to the appropriate row object based on the "attempts" iterator (starting at 0). 	
