Assign3: Due 11:59PM CT March 31

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

The Fibonacci series of numbers start with 1, 1, 2, 3, 5, 8, 13, 21, ...
where values at position 0 and 1 are 1, and values at each position after
that are a sum of values at the previous two positions.

Write four implementations of a function to compute the Fibonacci number at a given position.

Please start with one implementation at a time rather than rushing through all
of them at the same time.

The four implementations are described below:

1. An imperative iteration. 
  Given a position n, loop through totaling values until you reach the value for the given position.

2. A functional iteration. 
	  Given a position n, loop through totaling values until you reach the value for the given position. Avoid explicit mutability.

3. A simple recursion.
  Given a position, compute the value at a position using the expression fib(n - 1) + fib(n - 2).

4. A memoized recursion.
  Given a position, look up to see if the value has been precomputed and if so return that value. Otherwise, use recursion to compute the value.
  
Confirm that the memoized version is faster than the recursive version.

Reuse as much code as possible.

Please bring forward the practices, techniques, and tools you have learned so far. This includes: 
Good code quality
Lightweight design
Minimum code
Automated testing                                                         
Code coverage
Continuous integration

Once you complete coding, please answer the following:

1. What design principles did you use in this assignment? Discuss.

For assignment three, we had to apply multiple different design principles throughout the assignment, specifically DRY, YAGNI, and SRP. Since the primary goal of the assignment is to compute the Fibonacci number in four different methods, there can be a lot of overlapping code without a proper design. However, with the DRY principle, we must determine the best way to utilize previously written code to avoid overlapping with future code. Consistently applying DRY meant multiple refactors to compute the Fibonacci number concisely and cohesively. 

On the other hand, YAGNI assures our code does what it needs to do without overextending its functionality. To achieve YAGNI, we continue using the test-driven method by first writing out the desired tests and implementing the code just enough to perform what is needed. Thus, our code only does what is required to complete the given tests successfully.

Lastly, SRP assures that each function in our code only handles one functionality. For example, each class created is responsible for passing its implementations and nothing more. Moreover, the validation function will only validate the input and report if the input is invalid; if not, the function will return to the original function call. Overall, our code is kept cleanly and cohesively with the three principles. 

2. Any surprises or things that you did not expect?

Within the assignment, my teammate and I were shocked at how many methods we could apply to reuse previously written code to comply with the DRY design principle. Usually, our extent of reusability is passing a function definition either by itself or through a class. Thus, we never knew that we could use decorators in Python to pass and reuse functions concisely. Specifically, we utilize the decorator in writing and calling the validation function for each implementation of the Fibonacci calculator. Thus, achieving a minimal code design with all the functionality.

Another example is when we reuse the function call between the Fibonacci recursion implementation and the Fibonacci memoized implementation with lru_cache. Although it was difficult at first to understand how the new function call helped us reuse previously written code, after implementing the new changes, the code is more concise than before.

