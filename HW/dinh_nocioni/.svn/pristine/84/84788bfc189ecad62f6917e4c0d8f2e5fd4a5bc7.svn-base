import unittest
from src.wordPicker import getResponse, parse, get_a_random_word_given_a_seed, get_a_random_word
from unittest.mock import patch
import time


class WordPickerTests(unittest.TestCase):

  def test_getResponse_return_some_string(self):
    self.assertTrue(len(getResponse()) > 0)

  def test_parse_take_a_string_of_words_and_return_a_list_of_words(self):
    expected, words = [['FAVOR', 'RAPID', 'AGILE'], '[FAVOR, RAPID, AGILE]']

    self.assertEqual(expected, parse(words))

  def test_parse_take_empty_string_and_return_empty_list(self):

    self.assertEqual([], parse('[]'))

  def test_parse_exception_when_return_empty_list(self):

    with self.assertRaises(ValueError):
      parse("FAVOR") 
      
    
  def test_get_a_random_word_given_a_seed(self):
      seed = 129
      words = ['FAVOR', 'RAPID', 'AGILE']

      word = get_a_random_word_given_a_seed(seed, words)
     
      self.assertTrue(word in words)

  def test_get_a_random_word_given_a_seed_twice(self):
      seed = 210
      words = ['FAVOR', 'RAPID', 'AGILE']

      word1 = get_a_random_word_given_a_seed(seed, words)
      word2 = get_a_random_word_given_a_seed(seed, words) 
      
      self.assertNotEqual(word1, word2)
      
  def test_get_a_random_word_function_calls(self):

      with (patch("src.wordPicker.getResponse") as getResponseMock, 
            patch("src.wordPicker.parse") as parseMock, 
            patch("src.wordPicker.get_a_random_word_given_a_seed") as get_a_random_word_given_a_seed_mock):

        getResponseMock.return_value = "[FAVOR, RAPID, AGILE]"
        parseMock.return_value =  ['FAVOR', 'RAPID', 'AGILE']
        get_a_random_word_given_a_seed_mock.return_value = "FAVOR"
        
        
        self.assertEqual("FAVOR", get_a_random_word())
        
        getResponseMock.assert_called_with() 
        parseMock.assert_called_with("[FAVOR, RAPID, AGILE]")
        get_a_random_word_given_a_seed_mock.assert_called()
      
  def test_get_a_random_word_with_random_seed(self):
      with (patch("src.wordPicker.getResponse") as getResponseMock, patch("src.wordPicker.parse") as parseMock, 
            patch("src.wordPicker.get_a_random_word_given_a_seed") as get_a_random_word_given_a_seed_mock):

        getResponseMock.return_value = "['FAVOR', 'RAPID', 'AGILE']"
        parseMock.return_value =  ['FAVOR', 'RAPID', 'AGILE']
        get_a_random_word_given_a_seed_mock.return_value = "FAVOR"
        
        get_a_random_word()
        seed1 = get_a_random_word_given_a_seed_mock.call_args.args[0]
        
        time.sleep(0.5)
        get_a_random_word()
        seed2 = get_a_random_word_given_a_seed_mock.call_args.args[0]

        self.assertNotEqual(seed1, seed2)
    
if __name__ == '__main__': 
   unittest.main()
