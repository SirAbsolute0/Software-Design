import unittest
from src.wordPicker import getResponse, parse, get_a_random_word_given_a_seed, get_a_random_word
import random as rnd
from unittest.mock import Mock, patch

class WordPickerTests(unittest.TestCase):

  def test_getResponse(self):
    self.assertTrue(len(getResponse()) > 0)

  def test_parse(self):
    expected, words = [['FAVOR', 'RAPID', 'AGILE'], '[FAVOR, RAPID, AGILE]']

    self.assertEqual(expected, parse(words))

  def test_parse_empty(self):

    self.assertEqual([], parse('[]'))

  def test_parse_exception(self):

    with self.assertRaises(ValueError):
      parse("FAVOR") 
    
  def test_get_a_random_word_given_a_seed(self):
      seed = 129
      wordList = ['FAVOR', 'RAPID', 'AGILE']

      word1 = get_a_random_word_given_a_seed(seed, wordList)
      word2 = get_a_random_word_given_a_seed(seed, [i for i in wordList if i != word1])

      self.assertFalse(word1 == word2)
      
  def test_get_a_random_word(self):
      getResponse = Mock(return_value = "['FAVOR', 'RAPID', 'AGILE']")
      parse = Mock(return_value =  ['FAVOR', 'RAPID', 'AGILE'])
      get_a_random_word_given_a_seed = Mock(return_value = "FAVOR")
      
      word = get_a_random_word(getResponse, parse, get_a_random_word_given_a_seed)
      self.assertTrue(len(word) == 5 and word.isupper())
      
      getResponse.assert_called()
      parse.assert_called()
      get_a_random_word.assert_called()
      
      seed1 = get_a_random_word.assert_called_with()
     
if __name__ == '__main__': 
   unittest.main()
